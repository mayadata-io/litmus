---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml
    - /mnt/parameters.yml

  tasks:
    - block:

        - include_tasks: /utils/k8s/application_liveness_check.yml
          when: liveness_label != ''

        - include: test_prerequisites.yml
  
        - name: Identify the data consistency util to be invoked
          template:
            src: data_persistence.j2
            dest: data_persistence.yml

        - include_vars:
            file: data_persistence.yml
            
        - name: Record the data consistency util path
          set_fact:
            data_consistency_util_path: "{{ consistencyutil }}"
          when: data_persistence != ''

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/create_testname.yml

        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'SOT'

        ## DISPLAY APP INFORMATION 
 
        - name: Display the app information passed via the test job
          debug: 
            msg: 
              - "The application info is as follows:"
              - "Namespace    : {{ namespace }}"
              - "Label        : {{ label }}"
              - "PVC          : {{ pvc }}"  
              - "StorageClass : {{ sc }}"

        ## PRE-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify that the AUT (Application Under Test) is running
          include_tasks: "/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}" 
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"       
            delay: 5
            retries: 60 
        
        - name: Get the application pod name
          shell: > 
            kubectl get pods -n {{ namespace }} -l {{ label }} --no-headers
            -o custom-columns=:.metadata.name
          args:
            executable: /bin/bash
          register: app_pod_name
        
        - name: Get the PV name
          shell: >
            kubectl get pvc -n {{ namespace }} --no-headers -o custom-columns=:.spec.volumeName
          args:
            executable: /bin/bash
          register: pv_name

        - name: Get the target pod name associated with this pv
          shell: >
            kubectl get pods -n {{ operator_ns }} | grep {{ pv_name.stdout }} | awk '{print $1}'
          args:
            executable: /bin/bash
          register: target_pod_name

        - name: Create some test data
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'LOAD'
            ns: "{{ namespace }}"
            pod_name: "{{ app_pod_name.stdout }}"
          when: data_persistence != ''

        ## STORAGE FAULT INJECTION 

        - include_tasks: /chaoslib/cri_failure/cri_chaos.yml
          vars:
            app_ns: "{{ namespace }}"
            app_label: "{{ label }}"
            action: "cri_svc_stop"
            target_pod: "{{ target_pod_name.stdout }}"
            app_pod: "{{ app_pod_name.stdout }}"
            pvol_name: "{{ pv_name.stdout }}"

        - include_tasks: /chaoslib/cri_failure/cri_chaos.yml
          vars:
            app_ns: "{{ namespace }}"
            app_label: "{{ label }}"
            action: "cri_svc_restart"
            target_pod: "{{ target_pod_name.stdout }}"
            app_pod: "{{ app_pod_name.stdout }}"


        ## POST-CHAOS APPLICATION LIVENESS CHECK

        - name: Verify AUT liveness post fault-injection
          include_tasks: "/utils/k8s/status_app_pod.yml"
          vars:
            app_ns: "{{namespace}}" 
            app_lkey: "{{ label.split('=')[0] }}"
            app_lvalue: "{{ label.split('=')[1] }}"       
            delay: 5
            retries: 60

        - name: Create some test data
          include: "{{ data_consistency_util_path }}"
          vars:
            status: 'VERIFY'
            ns: "{{ namespace }}"
            pod_name: "{{ new_app_pod }}"
          when: data_persistence != ''

        - include_tasks: /utils/k8s/application_liveness_check.yml
          when: liveness_label != ''
   
        - set_fact:
            flag: "Pass"

      rescue: 
        - set_fact: 
            flag: "Fail"

      always: 
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
 
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

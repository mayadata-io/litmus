---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:

          ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

          ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'SOT'

        - block:

            - include_tasks: /utils/k8s/create_ns.yml

            - name: Update the storage class template with the variables.
              template:
                src: jiva-csi-busybox-sc.j2
                dest: jiva-csi-busybox-sc.yml

            - name: Create Storage Class
              shell: kubectl apply -f jiva-csi-busybox-sc.yml
              args:
                executable: /bin/bash
              register: sc_result
              failed_when: "sc_result.rc != 0"        

            - name: Verify if the provider storage class is present
              shell: >
                kubectl get storageclass {{ storage_class }}
              args:
                executable: /bin/bash
              register: provider_sc
              failed_when: "storage_class not in provider_sc.stdout"

            - name: Update the pvc template with the variables.
              template:
                src: jiva-csi-pvc.j2
                dest: jiva-csi-pvc.yml

            - name: Create Persistent Volume Claim
              shell: kubectl apply -f jiva-csi-pvc.yml
              args:
                executable: /bin/bash
              register: pvc_result
              failed_when: "pvc_result.rc != 0"

            - name: Update the busybox app template with the variables.
              template:
                src: jiva-csi-busybox.j2
                dest: jiva-csi-busybox.yml

            - name: Deploy busybox application on top of the created pvc
              shell: kubectl apply -f jiva-csi-busybox.yml
              args:
                executable: /bin/bash
              register: busybox_result
              failed_when: "busybox_result.rc != 0"
            
            - name: Verify the application pod status
              shell: >
                kubectl get pod -n {{ app_ns }} -l app={{ app_label }}
                --no-headers -o custom-columns=:.status.phase
              args:
                executable: /bin/bash
              register: status
              until: "'Running' in status.stdout"
              delay: 10
              retries: 30

            - name: Obtain the volume name
              shell: >
                kubectl get pvc {{ pvc_name }} -n {{ app_ns }} 
                --no-headers -o custom-columns=:.spec.volumeName
              args:
                executable: /bin/bash
              register: app_pv
              failed_when: "app_pv.rc != 0"

            - name: Obtain the controller pod name in operator namespace
              shell: >
                kubectl get pod -n {{ operator_ns }} -l openebs.io/component=jiva-controller,openebs.io/persistent-volume="{{ app_pv.stdout }}" 
                --no-headers -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: controller_pod
              failed_when: "controller_pod.rc != 0"

            - name: Obtain the replica count of the persistent volume
              shell: >
                kubectl get pod "{{ controller_pod.stdout }}" -n openebs 
                --no-headers -o jsonpath='{.spec.containers[*].env[*].value}'
              args:
                executable: /bin/bash
              register: replica_count
              failed_when: "replica_count.rc != 0"

            - name: Recording the replica count of the persistent volume
              set_fact:
                rep_count: "{{ replica_count.stdout }}"

            - name: Verify the controller pod is running
              shell: >
                kubectl get pod -n {{ operator_ns }} -l openebs.io/component=jiva-controller,openebs.io/persistent-volume="{{ app_pv.stdout }}" 
                --no-headers -o custom-columns=:.status.phase
              args:
                executable: /bin/bash
              register: status
              failed_when: "'Running' not in status.stdout"

            - name: Verify all the replica-pod is running
              shell: >
                kubectl get sts -n {{ operator_ns }} -l openebs.io/component=jiva-replica,openebs.io/persistent-volume="{{ app_pv.stdout }}" 
                --no-headers -o custom-columns=:.status.readyReplicas
              args:
                executable: /bin/bash
              register: ready_rep
              failed_when: "rep_count|int != ready_rep.stdout|int"

          when: action == "provision"

        - block:
        
            - name: Delete the application deployment
              shell: >
                kubectl delete deployment busybox -n {{ app_ns }}
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"

            - name: Verify if the application pod is deleted
              shell: >
                kubectl get pod -n {{ app_ns }} -l app={{ app_label }} 
                --no-headers -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: status
              until: "status.stdout == ''"
              delay: 10
              retries: 30

            - name: Obtain the volume name
              shell: >
                kubectl get pvc {{ pvc_name }} -n {{ app_ns }} 
                --no-headers -o custom-columns=:.spec.volumeName
              args:
                executable: /bin/bash
              register: app_pv
              failed_when: "app_pv.rc != 0"

            - name: Delete the application pvc
              shell: >
                kubectl delete pvc {{ pvc_name }} -n {{ app_ns }}
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"

            - name: Verify if the application pvc is deleted
              shell: >
                kubectl get pvc {{ pvc_name }} -n {{ app_ns }} 
              args:
                executable: /bin/bash
              register: status
              failed_when: "pvc_name in status.stdout"
            
            - name: Verify the controller pod is deleted
              shell: >
                kubectl get pod -n {{ operator_ns }} -l openebs.io/component=jiva-controller,openebs.io/persistent-volume="{{ app_pv.stdout }}" 
                --no-headers -o custom-columns=:.status.phase
              args:
                executable: /bin/bash
              register: status
              until: "status.stdout == ''"
              delay: 10
              retries: 30

            - name: Verify the replica-pod is deleted
              shell: >
                kubectl get pod -n {{ operator_ns }} -l openebs.io/component=jiva-replica,openebs.io/persistent-volume="{{ app_pv.stdout }}" 
                --no-headers -o custom-columns=:.status.phase
              args:
                executable: /bin/bash
              register: status
              until: "status.stdout == ''"
              delay: 10
              retries: 30

            - name: Delete the application namespace
              shell: kubectl delete namespace {{ app_ns }}
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"

            - name: Delete the storage class created
              shell: >
                kubectl delete sc {{ storage_class }}
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"  

          when: action == "deprovision"

        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

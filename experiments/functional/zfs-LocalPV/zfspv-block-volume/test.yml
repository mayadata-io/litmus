- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml
    
  tasks:
    - block:

        ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_litmus_result_resource.yml"
          vars:
            status: 'SOT'

        - name: Update the block volume pvc template with the test specific values
          template:
            src: block-volume-pvc.j2
            dest: block-volume-pvc.yml

        - name: Apply the pvc
          shell: >
            kubectl create -f block-volume-pvc.yml -n {{ app_ns }}
          args:
            executable: /bin/bash
          register: status
          failed_when: "status.rc != 0"

        - name: Check if the block volume PVC is bound
          shell: >
            kubectl get pvc {{ block_vol_pvc }} -n {{ app_ns }} 
            --no-headers -o custom-columns=:.status.phase
          args:
            executable: /bin/bash
          register: pvc_status
          until: "'Bound' in pvc_status.stdout"
          delay: 5
          retries: 30

        - name: Update the percona application template with the test specific values
          template:
            src: percona.j2
            dest: percona.yml

        - name: Deploy the application using block volume pvc
          shell: >
            kubectl create -f percona.yml -n {{ app_ns }}
          args:
            executable: /bin/bash
          
        - name: Get the application pod name
          shell: >
            kubectl get pod -n {{ app_ns }} -l {{ app_label }}
            -o jsonpath='{.metadata.name}'
          args:
            executable: /bin/bash
          register: app_pod_name

        - name: Check if the application pod is in running state
          shell: >
            kubectl get pod {{ app_pod_name.stdout }} -n {{ app_ns }}
            -o jsonpath='{.status.phase}'
          register: pod_status
          until: "'Running' in pod_status.stdout"
          delay: 5
          retries: 50

        - name: Create some test data into the application
          include_tasks: "/utils/scm/applications/mysql/mysql_data_persistence.yml"
          vars:
            status: 'LOAD'
            ns: "{{ app_ns }}"
            pod_name: "{{ app_pod_name.stdout }}"

        - name: Verify the data persistency
          include_tasks: "/utils/scm/applications/mysql/mysql_data_persistence.yml"
          vars:
            status: 'VERIFY'
            ns: "{{ app_ns }}"
            label: "{{ app_label }}"
            pod_name: "{{ app_pod_name.stdout }}"

        - set_fact:
            flag: "Pass"
        
      rescue:
      - set_fact:
          flag: "Fail"
        
      always:
      ## RECORD END-OF-TEST IN LITMUS RESULT CR
      - include_tasks: /utils/fcm/update_litmus_result_resource.yml
        vars:
          status: 'EOT'
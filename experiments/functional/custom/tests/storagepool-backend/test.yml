- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
   - block:

       - block:

            - name: Record test instance/run ID
              set_fact:
                run_id: "{{ lookup('env','RUN_ID') }}"

            - name: Construct testname appended with runID
              set_fact:
                test_name: "{{ test_name }}-{{ run_id }}"

         when: lookup('env','RUN_ID')

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
       - include_tasks: /utils/fcm/update_litmus_result_resource.yml
         vars:
           status: 'SOT'

       ## VERIFY AVAILABILITY OF SELECTED STORAGE CLASS

       - name: Check whether the provider storageclass is applied
         shell: kubectl get sc {{ lookup('env','PROVIDER_STORAGE_CLASS') }}
         args:
           executable: /bin/bash
         register: result

       - name: Replace the pvc placeholder with provider
         replace:
           path: "{{ test_pvc_yaml }}"
           regexp: "testclaim"
           replace: "{{ lookup('env','APP_PVC') }}"

       - name: Create test specific namespace.
         shell: kubectl create ns {{ app_ns }}
         args:
          executable: /bin/bash
         when: app_ns != 'litmus'

       - name: Checking the status  of test specific namespace.
         shell: kubectl get ns {{ app_ns }} -o custom-columns=:status.phase --no-headers
         args:
          executable: /bin/bash
         register: npstatus
         until: "'Active' in npstatus.stdout"
         delay: 30
         retries: 10

       - name: Replace the storageclass placeholder with provider
         replace:
           path: "{{ test_pvc_yaml }}"
           regexp: "testclass"
           replace: "{{ lookup('env','PROVIDER_STORAGE_CLASS') }}"

       - name: Deploy OpenEBS volume and run dd Load
         shell: kubectl apply -f {{ test_pvc_yaml }} -n {{ app_ns }}
         args:
           executable: /bin/bash

       - name: Confirm volume status is running
         shell: >
           kubectl get pods -n {{ app_ns }} -l openebs.io/persistent-volume-claim="{{app_pvc}}" -o custom-columns=:status.phase --no-headers
         args:
           executable: /bin/bash
         register: result
         until: "((result.stdout_lines|unique)|length) == 1 and 'Running' in result.stdout"
         delay: 30
         retries: 10

       - name: Obtain the storage pool name from storageclass
         shell: >
           kubectl get sc {{ storageclass }} -o jsonpath="{.metadata.annotations.cas\\.openebs\\.io/config}" 
           | grep -A1 "name: StoragePool" | awk NR==2 | cut -d ":" -f 2 | tr -d " "
         args:
           executable: /bin/bash
         register: result_sp

       - name: Get the mount path 
         shell: kubectl get sp {{ result_sp.stdout }} -o jsonpath='{.spec.path}'
         args:
           executable: /bin/bash
         register: mountpath

       - name: Obtain the PV name
         shell: kubectl get pvc -n {{ app_ns }} {{ app_pvc }} -o jsonpath='{.spec.volumeName}'
         args: 
           executable: /bin/bash
         register: pv_name

       - name: set the mountpath and pv name as variable
         set_fact:
           name: "{{ mountpath.stdout}}/{{pv_name.stdout }}"
      
       - name: Obtain the replica deployment hostpath
         shell: kubectl get deployment -n {{ app_ns }} -l openebs.io/replica=jiva-replica -o jsonpath='{..path}'
         args:
           executable: /bin/bash
         register: hostpath
      
       - debug:
           msg: "PV scheduled in {{ mountpath.stdout }}"
         when: "hostpath.stdout  ==  name"
    
       - set_fact:
           flag: "Pass"

     rescue:
       - set_fact:
           flag: "Fail"

     always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
       - include_tasks: /utils/fcm/update_litmus_result_resource.yml
         vars:
           status: 'EOT'


---

- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:
          ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

        ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_litmus_result_resource.yml"
          vars:
            status: 'SOT'
        
          ## Creating the storage class with tolerations enabled
        - name: generating yaml file for storage class
          template: 
            src: sc.j2
            dest: storage.yml

        - name: Create the storage class
          shell: kubectl apply -f storage.yml
          args:
            executable: /bin/bash
          register: status
          failed_when: "status.rc != 0"

          ## Creating namespaces and making the application for deployment
        - include_tasks: /utils/k8s/pre_create_app_deploy.yml

        - name: Replace the volume capacity placeholder with provider
          replace:
              path: "{{ application_deployment }}"
              regexp: "teststorage"
              replace: "{{ lookup('env','PV_CAPACITY') }}"

          ## Deploying the application
        - include_tasks: /utils/k8s/deploy_single_app.yml
          vars:
            check_app_pod: 'yes'
            delay: 10
            retries: 20

        - name: Obtain the pv name of the application.
          shell: >
            kubectl get pvc -n "{{ app_ns }}" -o custom-columns=:.spec.volumeName --no-headers
          args:
            executable: /bin/bash
          register: pv_name
          failed_when: "pv_name.rc != 0"

        - name: Obtain the node names on which jiva replica pods are scheduled
          shell: >
            kubectl get pods -n {{ operator_ns }} -l openebs.io/replica=jiva-replica,openebs.io/persistent-volume="{{ pv_name.stdout }}" 
            --no-headers -o custom-columns=:.spec.nodeName
          args:
            executable: /bin/bash
          register: replica_nodes
          failed_when: "replica_nodes.rc != 0"
                
        - name: Taint all the replica nodes
          shell: kubectl taint node "{{ item }}" "{{ taint_key }}"="{{ taint_value }}":NoSchedule
          args:
            executable: /bin/bash
          with_items:
            - "{{ replica_nodes.stdout_lines }}"

        - name: Delete the application deployment
          shell: > 
            kubectl delete deployment -n {{ app_ns }} -l {{ app_label }}
          args:
            executable: /bin/bash
          register: status
          failed_when: "status.rc != 0"

        - name: Delete the application pvc
          shell: >
            kubectl delete pvc {{ app_pvc }} -n {{ app_ns }}
          args:
            executable: /bin/bash
          register: status
          failed_when: "status.rc != 0"

        - name: Obtain the cleanup jobs pod name in operator namespace
          shell: >
            kubectl get pod -n {{ operator_ns }} --no-headers 
            -o custom-columns=:.metadata.name | grep sjr-"{{ pv_name.stdout }}"
          args:
            executable: /bin/bash
          register: cleanup_jobs
          failed_when: "cleanup_jobs.stdout == ''"

        - name: Check if the cleanup jobs completed successfully
          shell: >
            kubectl get pods "{{ item }}" -n "{{ operator_ns }}" 
            -o custom-columns=:.status.phase --no-headers
          args:
            executable: /bin/bash
          register: status
          with_items:
              - "{{ cleanup_jobs.stdout_lines }}"
          until: "((status.stdout_lines|unique)|length) == 1 and 'Succeeded' in status.stdout"
          delay: 5
          retries: 12              

        - name: Deleting the Application Namespace
          shell: >
            kubectl delete namespace {{ app_ns }} 
          args:
            executable: /bin/bash
          register: status    
          failed_when: "status.rc !=0 "

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:
        
        - name: Remove taints from all the jiva replica nodes
          shell: kubectl taint node "{{ item }}" "{{ taint_key }}"-
          args:
            executable: /bin/bash
          with_items:
            - "{{ replica_nodes.stdout_lines }}"

           ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

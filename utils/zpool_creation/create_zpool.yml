## PREREQUISITES: 
## For creating ZPOOL all nodes must have zfs utils installed.
## For zfs utils run this command on each `apt-get install zfsutils-linux`

- block: 

  - name: Create a daemonset with privileged access to create zpool on each node
    shell: >
      kubectl create -f /utils/zpool_creation/create_zpool_ds.yml
    args: 
      executable: /bin/bash
    
  - name: Confirm that the ds pods are running on all nodes
    shell: >
      kubectl get pod -l app=zfs-ds
      --no-headers -o custom-columns=:status.phase | sort | uniq
    args: 
      executable: /bin/bash
    register: result
    until: "result.stdout == 'Running'"
    delay: 5
    retries: 20

  - name: List the daemonset pods 
    shell: >
      kubectl get pods -l app=zfs-ds --no-headers -o custom-columns=:.metadata.name
    args:
      executable: /bin/bash
    register: zfs_ds_pods

  - block:
        
      ## make sure given disks are not is used.
      - name: Create ZPOOL on each node when pool type is STRIPE
        shell: >
          kubectl exec -ti {{ item }} -- bash -c 'zpool create {{ pool_name }} /dev/sdb'
        args: 
          executable: /bin/bash
        register: zpool_status
        failed_when: "zpool_status.rc != 0"
        with_items: "{{ zfs_ds_pods.stdout_lines }}"


    when: "pool_type == 'striped'"

  - block: 
    
      - name: Create ZPOOL on each node when pool type is MIRROR
        shell: >
          kubectl exec -ti {{ item }} -- bash -c 'zpool create {{ pool_name }} mirror /dev/sdb /dev/sdc'
        args: 
          executable: /bin/bash
        register: zpool_status
        failed_when: "zpool_status.rc != 0"
        with_items: "{{ zfs_ds_pods.stdout_lines }}"

    when: "pool_type == 'mirrored'"

  when: "action == 'provision'"

- block:

  - name: List the daemonset pods 
    shell: >
      kubectl get pods -l app=zfs-ds --no-headers -o custom-columns=:.metadata.name
    args:
      executable: /bin/bash
    register: zfs_ds_pods

  - name: Deprovision the ZPOOL 
    shell: > 
      kubectl exec -ti {{ item }} -- bash -c 'zpool destroy {{ pool_name }}'
    args:
      executable: /bin/bash
    with_items: "{{ zfs_ds_pods.stdout_lines }}"

  when: "action == 'deprovision'"
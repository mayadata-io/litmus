---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

          ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

          ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'SOT'

        - name: Downloading the csi-operator file
          get_url:
            url: "https://raw.githubusercontent.com/openebs/cstor-operators/master/deploy/csi-operator.yaml"
            dest: "{{ playbook_dir }}/csi-operator.yaml"
            force: yes
          register: status
          until:  "'OK' in status.msg"
          delay: 5
          retries: 3

        - name: Update the desired image tag for openebs-plugin
          replace:
            path: "{{ playbook_dir }}/csi-operator.yaml"
            regexp: "cstor-csi-driver:ci"
            replace: "cstor-csi-driver:{{ image_tag }}"

        - name: Change the OpenEBS component labels to desired version csi provisioner spec
          replace:
            path: "{{ playbook_dir }}/csi-operator.yaml"
            regexp: 'openebs.io/version: dev'
            replace: "openebs.io/version: {{ image_tag }}"
          
        - name: Deploy CSI Driver 
          shell: >
            kubectl apply -f csi-operator.yaml --validate=false
          args:
            executable: /bin/bash
          register: deploy_status
          failed_when: "deploy_status.rc != 0"

        - name: Identify the patch to be invoked
          template:
            src: patch.j2
            dest: patch.yml

        # By default, volume mount is disabled. When it is enabled, the below patching tasks should be ignored.

        - name: Patching openebs cstor csi-driver statefulset to allow volume remount
          shell: >
            kubectl patch statefulset openebs-cstor-csi-controller -n {{ operator_ns }} --patch "$(cat patch.yml)"
          register: patch_status
          failed_when: "'patched' not in patch_status.stdout"

        - name: Patching openebs cstor csi-driver daemonset to allow volume remount
          shell: >
            kubectl patch daemonset openebs-cstor-csi-node -n {{ operator_ns }} --patch "$(cat patch.yml)"
          register: patch_status
          failed_when: "'patched' not in patch_status.stdout"

        - name: check if csi-controller pod is running
          shell: >
            kubectl get pods -n {{ operator_ns }} -l app=openebs-cstor-csi-controller
            --no-headers -o custom-columns=:status.phase
          args:
            executable: /bin/bash
          register: csi_controller
          until: "'Running' in csi_controller.stdout"
          delay: 10
          retries: 30

        - name: Obtain the desired number of openebs-csi-node pods
          shell: >
            kubectl get ds -n {{ operator_ns }} openebs-cstor-csi-node --no-headers
            -o custom-columns=:status.desiredNumberScheduled
          args:
            executable: /bin/bash
          register: desired_count

        - name: Check if the desired count matches the ready pods
          command: >
            kubectl get ds -n {{ operator_ns }} openebs-cstor-csi-node --no-headers
            -o custom-columns=:status.numberReady
          args:
            executable: /bin/bash
          register: ready_pods
          until: "desired_count.stdout == ready_pods.stdout"
          delay: 5
          retries: 50

        - name: Update the storage class template with the variables.
          template:
            src: csi-cstor-sc.j2
            dest: csi-cstor-sc.yml

        - name: Create Storageclass
          shell: kubectl apply -f csi-cstor-sc.yml
          args:
            executable: /bin/bash
          register: sc_result
          failed_when: "sc_result.rc != 0"

        - name: Update the storage class template with the variables for FSType xfs.
          template:
            src: csi-cstor-xfs-sc.j2
            dest: csi-cstor-xfs-sc.yml

        - name: Create Storageclass for xfs FSType
          shell: kubectl apply -f csi-cstor-xfs-sc.yml
          args:
            executable: /bin/bash
          register: xfs_sc_result
          failed_when: "xfs_sc_result.rc != 0"

        - name: Update the volume snapshotclass template with the variables
          template:
            src: snapshot-class.j2
            dest: snapshot-class.yml

        - name: Create volume snapshotclass
          shell: kubectl apply -f snapshot-class.yml
          args:
            executable: /bin/bash
          register: result
          failed_when: "result.rc != 0"

        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

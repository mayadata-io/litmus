---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

          ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

          ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'SOT'

        - block:
            - name: Downloading the csi-operator file
              get_url:
                url: "https://raw.githubusercontent.com/openebs/cstor-csi/v1.10.x/deploy/csi-operator.yaml"
                dest: "{{ playbook_dir }}/csi-operator.yaml"
                force: yes
              register: csi_status
              until:  "'OK' in csi_status.msg"
              delay: 5
              retries: 3
              when: node_os == "ubuntu-16.04" or node_os == "centos"

            - name: Downloading the csi-operator file
              get_url:
                url: "https://raw.githubusercontent.com/openebs/cstor-csi/v1.10.x/deploy/csi-operator-ubuntu-18.04.yaml"
                dest: "{{ playbook_dir }}/csi-operator.yaml"
                force: yes
              register: csi_status
              until:  "'OK' in csi_status.msg"
              delay: 5
              retries: 3
              when: node_os == "ubuntu-18.04"

            - name: Update the desired image tag for openebs-plugin
              replace:
                path: "{{ playbook_dir }}/csi-operator.yaml"
                regexp: "cstor-csi-driver:ci"
                replace: "cstor-csi-driver:{{ release_tag }}"

            - name: Change the OpenEBS component labels to desired version csi provisioner spec
              replace:
                path: "{{ playbook_dir }}/csi-operator.yaml"
                regexp: 'openebs.io/version: dev'
                replace: "openebs.io/version: {{ release_tag }}"

          when: "release_tag == '1.10.0'"

        - block:

            - block:
                - name: Downloading the csi-operator file
                  get_url:
                    url: "https://raw.githubusercontent.com/openebs/charts/{{ release_branch }}/{{ release_version }}/csi-operator-{{ release_tag }}.yaml"
                    dest: "{{ playbook_dir }}/csi-operator.yaml"
                    force: yes
                  register: status
                  until:  "'OK' in status.msg"
                  delay: 5
                  retries: 3
                  when: node_os == "ubuntu-16.04" or node_os == "centos"

                - name: Downloading the csi-operator file
                  get_url:
                    url: "https://raw.githubusercontent.com/openebs/charts/{{ release_branch }}/{{ release_version }}/csi-operator-{{ release_tag }}-ubuntu-18.04.yaml"
                    dest: "{{ playbook_dir }}/csi-operator.yaml"
                    force: yes
                  register: status
                  until:  "'OK' in status.msg"
                  delay: 5
                  retries: 3
                  when: node_os == "ubuntu-18.04"

              when: release_tag == "1.11.0" or release_tag == "1.12.0"  

            - block:
                - block: 
                    - name: Downloading the csi operator yaml spec from charts
                      get_url:
                        url: "https://raw.githubusercontent.com/openebs/charts/{{ release_branch }}/{{ release_version }}/csi-operator-{{ release_tag }}.yaml"
                        dest: "{{ playbook_dir }}/csi-operator.yaml"
                        force: yes
                      register: operator_file
                      ignore_errors: true
                      until:  "'OK' in operator_file.msg"
                      delay: 5
                      retries: 3

                    - block:

                        - name: Downloading the csi operator yaml spec from charts
                          get_url:
                            url: "https://raw.githubusercontent.com/openebs/cstor-operators/{{ release_branch }}/deploy/csi-operator.yaml"
                            dest: "{{ playbook_dir }}/csi-operator.yaml"
                            force: yes
                          register: charts_file
                          ignore_errors: true
                          until:  "'OK' in charts_file.msg"
                          delay: 5
                          retries: 3

                        - block:

                            - name: Update the desired image tag for openebs-plugin
                              replace:
                                path: "{{ playbook_dir }}/csi-operator.yaml"
                                regexp: "cstor-csi-driver:ci"
                                replace: "cstor-csi-driver:{{ release_tag }}"

                            - name: Change the OpenEBS component labels to desired version csi provisioner spec
                              replace:
                                path: "{{ playbook_dir }}/csi-operator.yaml"
                                regexp: 'openebs.io/version: dev'
                                replace: "openebs.io/version: {{ release_tag }}"

                          when: release_version != 'master'

                      when: "'OK' not in operator_file.msg"

                  when: release_tag != '1.12.0'

              when: release_tag != '1.11.0'

          when: release_tag != '1.10.0'

        - name: Deploy CSI Driver
          shell: >
            kubectl apply -f csi-operator.yaml
          args:
            executable: /bin/bash
          register: deploy_status
          failed_when: "deploy_status.rc != 0"

        - name: check if csi-controller pod is running
          shell: >
            kubectl get pods -n {{ operator_ns }} -l app=openebs-cstor-csi-controller
            --no-headers -o custom-columns=:status.phase
          args:
            executable: /bin/bash
          register: csi_controller
          until: "'Running' in csi_controller.stdout"
          delay: 10
          retries: 30

        - name: Obtain the desired number of openebs-csi-node pods
          shell: >
            kubectl get ds -n {{ operator_ns }} openebs-cstor-csi-node --no-headers
            -o custom-columns=:status.desiredNumberScheduled
          args:
            executable: /bin/bash
          register: desired_count

        - name: Check if the desired count matches the ready pods
          command: >
            kubectl get ds -n {{ operator_ns }} openebs-cstor-csi-node --no-headers
            -o custom-columns=:status.numberReady
          args:
            executable: /bin/bash
          register: ready_pods
          until: "desired_count.stdout == ready_pods.stdout"
          delay: 5
          retries: 50

        - name: Identify the patch to be invoked
          template:
            src: patch.j2
            dest: patch.yml

        # By default, volume mount is disabled. When it is enabled, the below patching tasks should be ignored.
        - name: Patching openebs cstor csi-driver daemonset to allow volume remount
          shell: >
            kubectl patch daemonset openebs-cstor-csi-node -n {{ operator_ns }} --patch "$(cat patch.yml)"
          register: patch_status
          failed_when: "'patched' not in patch_status.stdout"
          when: release_tag != "1.11.0"

        - name: Check if the desired count matches the ready pods after patching the daemonset
          command: >
            kubectl get ds -n {{ operator_ns }} openebs-cstor-csi-node --no-headers
            -o custom-columns=:status.numberReady
          args:
            executable: /bin/bash
          register: ready_pods
          until: "desired_count.stdout == ready_pods.stdout"
          delay: 5
          retries: 50

        - name: Update the volume snapshotclass template with the variables
          template:
            src: snapshot-class.j2
            dest: snapshot-class.yml

        - name: Create volume snapshotclass
          shell: kubectl apply -f snapshot-class.yml
          args:
            executable: /bin/bash
          register: result
          failed_when: "result.rc != 0"

        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

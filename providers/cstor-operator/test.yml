# Apply openebs operation.

- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:

    - block:

         ## GENERATING THE TEST NAME
        - include_tasks: /utils/fcm/create_testname.yml

         ##  RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_litmus_result_resource.yml"
          vars:
            status: 'SOT'


        - block:
            - name: Downloading the csi-operator file
              get_url:
                url: "https://raw.githubusercontent.com/openebs/charts/master/archive/1.10.x/csi-operator-1.10.0.yaml"
                dest: "{{ playbook_dir }}/csi-operator.yaml"
                force: yes
              register: csi_status
              until:  "'OK' in csi_status.msg"
              delay: 5
              retries: 3
              when: node_os == "ubuntu-16.04" or node_os == "centos"

            - name: Downloading the csi-operator file
              get_url:
                url: "https://raw.githubusercontent.com/openebs/charts/master/archive/1.10.x/csi-operator-1.10.0-ubuntu-18.04.yaml"
                dest: "{{ playbook_dir }}/csi-operator.yaml"
                force: yes
              register: csi_status
              until:  "'OK' in csi_status.msg"
              delay: 5
              retries: 3
              when: node_os == "ubuntu-18.04"

            - name: Downloading openebs cStor operator from charts
              get_url:
                url: https://raw.githubusercontent.com/openebs/charts/master/archive/1.10.x/cstor-operator-1.10.0.yaml
                dest: "{{ playbook_dir }}/{{ cspc_operator }}"
                force: yes
              register: release
              until:  "'OK' in release.msg"
              delay: 5
              retries: 3

            - name: Deploy CSI Driver when the release tag is 1.10.0
              shell: >
                kubectl apply -f csi-operator.yaml
              args:
                executable: /bin/bash
              register: deploy_status
              failed_when: "deploy_status.rc != 0"              

          when: "release_tag == '1.10.0'"

        - block:

            - block:
                - name: Downloading the csi-operator file
                  get_url:
                    url: "https://raw.githubusercontent.com/openebs/charts/gh-pages/{{ release_tag }}/csi-operator-{{ release_tag }}.yaml"
                    dest: "{{ playbook_dir }}/csi-operator.yaml"
                    force: yes
                  register: status
                  until:  "'OK' in status.msg"
                  delay: 5
                  retries: 3
                  when: node_os == "ubuntu-16.04" or node_os == "centos"

                - name: Downloading the csi-operator file
                  get_url:
                    url: "https://raw.githubusercontent.com/openebs/charts/gh-pages/{{ release_tag }}/csi-operator-{{ release_tag }}-ubuntu-18.04.yaml"
                    dest: "{{ playbook_dir }}/csi-operator.yaml"
                    force: yes
                  register: status
                  until:  "'OK' in status.msg"
                  delay: 5
                  retries: 3
                  when: node_os == "ubuntu-18.04"

                - name: Downloading openebs cStor operator from charts
                  get_url:
                    url: https://raw.githubusercontent.com/openebs/charts/gh-pages/{{ release_tag }}/cstor-operator-{{ release_tag }}.yaml
                    dest: "{{ playbook_dir }}/{{ cspc_operator }}"
                    force: yes
                  register: release
                  until:  "'OK' in release.msg"
                  delay: 5
                  retries: 3

                - name: Deploy CSI Driver when the csi verison is {{ release_tag }}
                  shell: >
                    kubectl apply -f csi-operator.yaml
                  args:
                    executable: /bin/bash
                  register: deploy_status
                  failed_when: "deploy_status.rc != 0"

              when: release_tag == "1.11.0" or release_tag == "1.12.0"  

            - block:
                - block:

                    - name: Downloading openebs cStor operator from charts
                      get_url:
                        url: https://raw.githubusercontent.com/openebs/charts/{{ release_branch }}/{{ release_version }}/cstor-operator-{{ release_tag }}.yaml
                        dest: "{{ playbook_dir }}/{{ cspc_operator }}"
                        force: yes
                      register: release
                      until:  "'OK' in release.msg"
                      delay: 5
                      retries: 3
                      ignore_errors: true

                    - block:

                        - name: Downloading the csi operator yaml spec from charts
                          get_url:
                            url: "https://raw.githubusercontent.com/openebs/cstor-operators/master/deploy/csi-operator.yaml"
                            dest: "{{ playbook_dir }}/csi-operator.yaml"
                            force: yes
                          register: charts_file
                          until:  "'OK' in charts_file.msg"
                          delay: 5
                          retries: 3

                        - name: Downloading openebs cspc-operator.yaml
                          get_url:
                            url: "{{ cspc_operator_link }}"
                            dest: "{{ playbook_dir }}/{{ cspc_operator }}"
                            force: yes
                          register: result
                          until:  "'OK' in result.msg"
                          delay: 5
                          retries: 3

                        - name: Downloading rbac for cstor operator
                          get_url:
                            url: "{{ cspc_rbac_link }}"
                            dest: "{{ playbook_dir }}/{{ cspc_rbac }}"
                            force: yes
                          register: result
                          until:  "'OK' in result.msg"
                          delay: 5
                          retries: 3

                        - name: Downloading crd yaml spec for cstor operator
                          get_url:
                            url: "{{ all_crd_link }}"
                            dest: "{{ playbook_dir }}/{{ cspc_crd }}"
                            force: yes
                          register: result
                          until:  "'OK' in result.msg"
                          delay: 5
                          retries: 3                                               

                        - block:

                            - name: Update the desired image tag for openebs-plugin
                              replace:
                                path: "{{ playbook_dir }}/csi-operator.yaml"
                                regexp: "cstor-csi-driver:ci"
                                replace: "cstor-csi-driver:{{ release_tag }}"

                            - name: Change the OpenEBS component labels to desired version csi provisioner spec
                              replace:
                                path: "{{ playbook_dir }}/csi-operator.yaml"
                                regexp: 'openebs.io/version: dev'
                                replace: "openebs.io/version: {{ release_tag }}"

                            - name: Change CSPC operator image
                              replace:
                                path: "{{ cspc_operator }}"
                                regexp: openebs/cspc-operator-amd64:ci
                                replace: openebs/cspc-operator:{{ lookup('env','IMAGE_TAG') }}
                              when: lookup('env','IMAGE_TAG') | length > 0

                            - name: Change CSTOR POOL MANAGER image
                              replace:
                                path: "{{ cspc_operator }}"
                                regexp: openebs/cstor-pool-manager-amd64:ci
                                replace: openebs/cstor-pool-manager:{{ lookup('env','IMAGE_TAG') }}
                              when: lookup('env','IMAGE_TAG') | length > 0

                            - name: Change OPENEBS_IO_CSTOR_POOL image
                              replace:
                                path: "{{ cspc_operator }}"
                                regexp: openebs/cstor-pool:ci
                                replace: openebs/cstor-pool:{{ lookup('env','IMAGE_TAG') }}
                              when: lookup('env','IMAGE_TAG') | length > 0

                            - name: Change OPENEBS_IO_CSTOR_POOL_EXPORTER image
                              replace:
                                path: "{{ cspc_operator }}"
                                regexp: openebs/m-exporter:ci
                                replace: openebs/m-exporter:{{ lookup('env','IMAGE_TAG') }}
                              when: lookup('env','IMAGE_TAG') | length > 0

                            - name: Change openebs cvc operator image
                              replace:
                                path: "{{ cspc_operator }}"
                                regexp: openebs/cvc-operator-amd64:ci
                                replace: openebs/cvc-operator:{{ lookup('env','IMAGE_TAG') }}
                              when: lookup('env','IMAGE_TAG') | length > 0

                            - name: Change openebs CSTOR ISTGT image
                              replace:
                                path: "{{ cspc_operator }}"
                                regexp: openebs/cstor-istgt:ci
                                replace: openebs/cstor-istgt:{{ lookup('env','IMAGE_TAG') }}
                              when: lookup('env','IMAGE_TAG') | length > 0

                            - name: Change openebs CSTOR VOLUME MGMT image
                              replace:
                                path: "{{ cspc_operator }}"
                                regexp: openebs/cstor-volume-manager-amd64:ci
                                replace: openebs/cstor-volume-manager:{{ lookup('env','IMAGE_TAG') }}
                              when: lookup('env','IMAGE_TAG') | length > 0

                            - name: Change openebs CSTOR WEBHOOK image
                              replace:
                                path: "{{ cspc_operator }}"
                                regexp: openebs/cstor-webhook-amd64:ci
                                replace: openebs/cstor-webhook:{{ lookup('env','IMAGE_TAG') }}
                              when: lookup('env','IMAGE_TAG') | length > 0

                            - name: Change the OpenEBS component labels to desired version in Operator yaml
                              replace:
                                path: "{{ cspc_operator }}"
                                regexp: 'openebs.io/version: dev'
                                replace: "openebs.io/version: {{ release_tag }}"

                          when: release_version != 'master'

                        - name: Deploy CSI Driver
                          shell: >
                            kubectl apply -f csi-operator.yaml
                          args:
                            executable: /bin/bash
                          register: deploy_status
                          failed_when: "deploy_status.rc != 0"

                        - name: Applying cspc rbac
                          shell: "kubectl  apply -f {{ cspc_rbac }}"
                          args:
                            executable: /bin/bash

                        - name: Applying cspc crd
                          shell: "kubectl  apply -f {{ cspc_crd }}"
                          args:
                            executable: /bin/bash                          

                      when: "'OK' not in release.msg"

                  when: release_tag != '1.12.0'

              when: release_tag != '1.11.0'

          when: release_tag != '1.10.0'

        - block: 

            - name: Change the value for admission server failure policy
              replace:
                path: "{{ cspc_operator }}"
                regexp: 'value: "Fail"'
                after: '- name: ADMISSION_WEBHOOK_FAILURE_POLICY'
                replace: 'value: "{{ webhook_policy }}"'
              when: lookup('env','WEBHOOK_FAILURE_POLICY') != ''

            - name: Applying cspc operator
              shell: "kubectl  apply -f {{ cspc_operator }}"
              args:
                executable: /bin/bash

            - name: Checking OpenEBS-CSPC-Operator is running
              shell: >
                kubectl get pods -n {{ namespace }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="cspc-operator")].status.phase}'
              register: cspc_status
              until: "'Running' in cspc_status.stdout"
              delay: 5
              retries: 120

            - name: Checking OpenEBS-CVC-Operator is running
              shell: >
                kubectl get pods -n {{ namespace }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="cvc-operator")].status.phase}'
              register: cvc_status
              until: "'Running' in cvc_status.stdout"
              delay: 5
              retries: 120

            - name: Checking OpenEBS-CVC-Operator is running
              shell: >
                kubectl get pods -n {{ namespace }}
                -o jsonpath='{.items[?(@.metadata.labels.app=="cstor-admission-webhook")].status.phase}'
              register: admission_status
              until: "'Running' in admission_status.stdout"
              delay: 5
              retries: 120                       

            - name: Restart the ndm daemonset pods
              shell: kubectl delete pods -n {{ namespace }} -l name=openebs-ndm
              args:
                executable: /bin/bash

            - name: Obtain the desired number of ndm daemonset
              shell: >
                kubectl get daemonset -n {{ namespace }} -l name=openebs-ndm 
                -o custom-columns=:.status.desiredNumberScheduled --no-headers
              args:
                executable: /bin/bash
              register: desired_count

            - name: Verify readily available daemonset is equal to desired count
              shell: >
                kubectl get daemonset -n {{ namespace }} -l name=openebs-ndm
                -o custom-columns=:.status.numberReady --no-headers
              args:
                executable: /bin/bash
              register: ready_count
              until: (ready_count.stdout)|int == (desired_count.stdout)|int
              delay: 5
              retries: 120

            - name: Confirm if node-disk-manager is running in all the nodes
              shell: >
                kubectl get pods -n {{ namespace }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-ndm")].status.phase}' | grep Running | wc -w
              args:
                executable: /bin/bash
              register: ndm_count
              until: (desired_count.stdout)|int == (ndm_count.stdout)|int
              delay: 5
              retries: 60
              
            - name: check if csi-controller pod is running
              shell: >
                kubectl get pods -n {{ operator_ns }} -l app=openebs-cstor-csi-controller
                --no-headers -o custom-columns=:status.phase
              args:
                executable: /bin/bash
              register: csi_controller
              until: "'Running' in csi_controller.stdout"
              delay: 10
              retries: 30

            - name: Obtain the desired number of openebs-csi-node pods
              shell: >
                kubectl get ds -n {{ operator_ns }} openebs-cstor-csi-node --no-headers
                -o custom-columns=:status.desiredNumberScheduled
              args:
                executable: /bin/bash
              register: desired_count

            - name: Check if the desired count matches the ready pods
              command: >
                kubectl get ds -n {{ operator_ns }} openebs-cstor-csi-node --no-headers
                -o custom-columns=:status.numberReady
              args:
                executable: /bin/bash
              register: ready_pods
              until: "desired_count.stdout == ready_pods.stdout"
              delay: 5
              retries: 50

            - name: Identify the patch to be invoked
              template:
                src: patch.j2
                dest: patch.yml

            # By default, volume mount is disabled. When it is enabled, the below patching tasks should be ignored.
            - name: Patching openebs cstor csi-driver daemonset to allow volume remount
              shell: >
                kubectl patch daemonset openebs-cstor-csi-node -n {{ operator_ns }} --patch "$(cat patch.yml)"
              register: patch_status
              failed_when: "'patched' not in patch_status.stdout"
              when: release_tag != "1.11.0"

            - name: Check if the desired count matches the ready pods after patching the daemonset
              command: >
                kubectl get ds -n {{ operator_ns }} openebs-cstor-csi-node --no-headers
                -o custom-columns=:status.numberReady
              args:
                executable: /bin/bash
              register: ready_pods
              until: "desired_count.stdout == ready_pods.stdout"
              delay: 5
              retries: 50

            - name: Update the volume snapshotclass template with the variables
              template:
                src: snapshot-class.j2
                dest: snapshot-class.yml

            - name: Create volume snapshotclass
              shell: kubectl apply -f snapshot-class.yml
              args:
                executable: /bin/bash
              register: result
              failed_when: "result.rc != 0"

          when: lookup('env','ACTION') == "provision"

        - block:
              - name: Cleaning cspc operator
                shell: "kubectl  delete -f {{ cspc_operator_link }}"
                args:
                  executable: /bin/bash
                ignore_errors: True

              - name: Confirm pods has been deleted
                shell: kubectl get pods -n {{ namespace }}
                args:
                  executable: /bin/bash
                register: result
                until: 'item not in result.stdout'
                with_items:
                  - "cstor-operator"
                  - "cvc-operator"
                  - "cstor-admission-webhook"
                delay: 30
                retries: 10

          when: lookup('env','ACTION') == "deprovision"

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

# Apply openebs operation.

- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:

    - block:

         ## GENERATING THE TEST NAME
        - include_tasks: /utils/fcm/create_testname.yml

         ##  RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_litmus_result_resource.yml"
          vars:
            status: 'SOT'

        - name: Downloading openebs cStor operator from charts
          get_url:
            url: https://raw.githubusercontent.com/openebs/charts/{{ release_branch }}/{{ release_version }}/cstor-operator-{{ cspc_image_tag }}.yaml
            dest: "{{ playbook_dir }}/{{ cspc_operator }}"
            force: yes
          register: release
          until:  "'OK' in release.msg"
          delay: 5
          retries: 3
          ignore_errors: true

        - block:

            - name: Downloading openebs cspc-operator.yaml
              get_url:
                url: "{{ cspc_operator_link }}"
                dest: "{{ playbook_dir }}/{{ cspc_operator }}"
                force: yes
              register: result
              until:  "'OK' in result.msg"
              delay: 5
              retries: 3

            - name: Downloading rbac for cstor operator
              get_url:
                url: "{{ cspc_rbac_link }}"
                dest: "{{ playbook_dir }}/{{ cspc_rbac }}"
                force: yes
              register: result
              until:  "'OK' in result.msg"
              delay: 5
              retries: 3

            - name: Downloading crd yaml spec for cstor operator
              get_url:
                url: "{{ all_crd_link }}"
                dest: "{{ playbook_dir }}/{{ cspc_crd }}"
                force: yes
              register: result
              until:  "'OK' in result.msg"
              delay: 5
              retries: 3

            - block:

                - name: Change CSPC operator image
                  replace:
                    path: "{{ cspc_operator }}"
                    regexp: openebs/cspc-operator-amd64:ci
                    replace: openebs/cspc-operator-amd64:{{ lookup('env','CSPC_OPERATOR_IMAGE') }}
                  when: lookup('env','CSPC_OPERATOR_IMAGE') | length > 0

                - name: Change CSTOR POOL MANAGER image
                  replace:
                    path: "{{ cspc_operator }}"
                    regexp: openebs/cstor-pool-manager-amd64:ci
                    replace: openebs/cstor-pool-manager-amd64:{{ lookup('env','CSPC_OPERATOR_IMAGE') }}
                  when: lookup('env','CSPC_OPERATOR_IMAGE') | length > 0

                - name: Change OPENEBS_IO_CSTOR_POOL image
                  replace:
                    path: "{{ cspc_operator }}"
                    regexp: openebs/cstor-pool:ci
                    replace: openebs/cstor-pool:{{ lookup('env','CSPC_OPERATOR_IMAGE') }}
                  when: lookup('env','CSPC_OPERATOR_IMAGE') | length > 0

                - name: Change OPENEBS_IO_CSTOR_POOL_EXPORTER image
                  replace:
                    path: "{{ cspc_operator }}"
                    regexp: openebs/m-exporter:ci
                    replace: openebs/m-exporter:{{ lookup('env','CSPC_OPERATOR_IMAGE') }}
                  when: lookup('env','CSPC_OPERATOR_IMAGE') | length > 0

                - name: Change openebs cvc operator image
                  replace:
                    path: "{{ cspc_operator }}"
                    regexp: openebs/cvc-operator-amd64:ci
                    replace: openebs/cvc-operator-amd64:{{ lookup('env','CSPC_OPERATOR_IMAGE') }}
                  when: lookup('env','CSPC_OPERATOR_IMAGE') | length > 0

                - name: Change openebs CSTOR ISTGT image
                  replace:
                    path: "{{ cspc_operator }}"
                    regexp: openebs/cstor-istgt:ci
                    replace: openebs/cstor-istgt:{{ lookup('env','CSPC_OPERATOR_IMAGE') }}
                  when: lookup('env','CSPC_OPERATOR_IMAGE') | length > 0

                - name: Change openebs CSTOR VOLUME MGMT image
                  replace:
                    path: "{{ cspc_operator }}"
                    regexp: openebs/cstor-volume-manager-amd64:ci
                    replace: openebs/cstor-volume-manager-amd64:{{ lookup('env','CSPC_OPERATOR_IMAGE') }}
                  when: lookup('env','CSPC_OPERATOR_IMAGE') | length > 0

                - name: Change openebs CSTOR WEBHOOK image
                  replace:
                    path: "{{ cspc_operator }}"
                    regexp: openebs/cstor-webhook-amd64:ci
                    replace: openebs/cstor-webhook-amd64:{{ lookup('env','CSPC_OPERATOR_IMAGE') }}
                  when: lookup('env','CSPC_OPERATOR_IMAGE') | length > 0

                - name: Change the OpenEBS component labels to desired version in Operator yaml
                  replace:
                    path: "{{ cspc_operator }}"
                    regexp: 'openebs.io/version: dev'
                    replace: "openebs.io/version: {{ cspc_image_tag }}"
         
              when: release_version != "master"

          when: "'OK' not in release.msg"

        - block: 

            - name: Change the value for admission server failure policy
              replace:
                path: "{{ cspc_operator }}"
                regexp: 'value: "Fail"'
                after: '- name: ADMISSION_WEBHOOK_FAILURE_POLICY'
                replace: 'value: "{{ webhook_policy }}"'
              when: lookup('env','WEBHOOK_FAILURE_POLICY') != ''

            - name: Applying cspc operator
              shell: "kubectl  apply -f {{ cspc_operator }}"
              args:
                executable: /bin/bash

            - block:

                - name: Applying cspc rbac
                  shell: "kubectl  apply -f {{ cspc_rbac }}"
                  args:
                    executable: /bin/bash

                - name: Applying cspc crd
                  shell: "kubectl  apply -f {{ cspc_crd }}"
                  args:
                    executable: /bin/bash
              
              when: "'OK' not in release.msg"

            - name: Checking OpenEBS-CSPC-Operator is running
              shell: >
                kubectl get pods -n {{ namespace }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="cspc-operator")].status.phase}'
              register: cspc_status
              until: "'Running' in cspc_status.stdout"
              delay: 5
              retries: 120

            - name: Checking OpenEBS-CVC-Operator is running
              shell: >
                kubectl get pods -n {{ namespace }}
                -o jsonpath='{.items[?(@.metadata.labels.name=="cvc-operator")].status.phase}'
              register: cvc_status
              until: "'Running' in cvc_status.stdout"
              delay: 5
              retries: 120

            - name: Checking OpenEBS-CVC-Operator is running
              shell: >
                kubectl get pods -n {{ namespace }}
                -o jsonpath='{.items[?(@.metadata.labels.app=="cstor-admission-webhook")].status.phase}'
              register: admission_status
              until: "'Running' in admission_status.stdout"
              delay: 5
              retries: 120                       

          when: lookup('env','ACTION') == "provision"

        - block:
              - name: Cleaning cspc operator
                shell: "kubectl  delete -f {{ cspc_operator_link }}"
                args:
                  executable: /bin/bash
                ignore_errors: True

              - name: Confirm pods has been deleted
                shell: kubectl get pods -n openebs
                args:
                  executable: /bin/bash
                register: result
                until: 'item not in result.stdout'
                with_items:
                  - "cstor-operator"
                  - "cvc-operator"
                  - "cstor-admission-webhook"
                delay: 30
                retries: 10

          when: lookup('env','ACTION') == "deprovision"

        - set_fact:
            flag: "Pass"

      rescue:
        - set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

---
- hosts: localhost
  connection: local

  vars_files:
    - test_vars.yml

  tasks:
    - block:

          ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

          ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'SOT'

        - name: Install Jiva operator in operator namespace
          shell: |
            kubectl apply -f https://raw.githubusercontent.com/openebs/jiva-operator/master/deploy/crds/openebs_v1alpha1_jivavolume_crd.yaml
            kubectl apply -f https://raw.githubusercontent.com/openebs/jiva-operator/master/deploy/service_account.yaml
            kubectl apply -f https://raw.githubusercontent.com/openebs/jiva-operator/master/deploy/role.yaml
            kubectl apply -f https://raw.githubusercontent.com/openebs/jiva-operator/master/deploy/role_binding.yaml
            kubectl apply -f https://raw.githubusercontent.com/openebs/jiva-operator/master/deploy/operator.yaml
          args:
            executable: /bin/bash
          register: status
          failed_when: "status.rc != 0"

        - name: Obtain the Jiva operator pod in operator namespace
          shell: >
            kubectl get po -n {{ operator_ns }} --no-headers -l name=jiva-operator 
            -o custom-columns=:.metadata.name
          args:
            executable: /bin/bash
          register: jiva_operator_pod
          
        - name: Verify the status of Jiva operator
          shell: >
            kubectl get po {{ jiva_operator_pod.stdout }} -n {{ operator_ns }} 
            --no-headers -o custom-columns=:.status.phase
          args:
            executable: /bin/bash
          register: jiva_operator
          until: "'Running' in jiva_operator.stdout"
          delay: 10
          retries: 30
            
        - name: Deploy Jiva CSI Driver if OS is either centos or ubuntu-16.04 
          shell: >
            kubectl apply -f https://raw.githubusercontent.com/openebs/jiva-csi/master/deploy/jiva-csi-ubuntu-16.04.yaml
          args:
            executable: /bin/bash
          when: node_os == "ubuntu-16.04" or node_os == "centos"
    
        - name: Deploy CSI Driver if os is ubuntu 18.04
          shell: >
            kubectl apply -f https://raw.githubusercontent.com/openebs/jiva-csi/master/deploy/jiva-csi.yaml
          args:
            executable: /bin/bash
          when: node_os == "ubuntu-18.04"

        - name: check if csi-controller pod is running
          shell: >
            kubectl get pods -n kube-system -l app=openebs-jiva-csi-controller 
            --no-headers -o custom-columns=:status.phase
          args:
            executable: /bin/bash
          register: csi_controller
          until: "'Running' in csi_controller.stdout"
          delay: 10
          retries: 30

        - name: Obtain the desired number of openebs-csi-node pods
          shell: >
            kubectl get daemonset openebs-jiva-csi-node -n kube-system 
            --no-headers -o custom-columns=:status.desiredNumberScheduled
          args:
            executable: /bin/bash
          register: desired_count

        - name: Check if the desired count matches the ready pods
          command: >
            kubectl get daemonset openebs-jiva-csi-node -n kube-system --no-headers 
            -o custom-columns=:status.numberReady
          args:
            executable: /bin/bash
          register: ready_pods
          until: "desired_count.stdout == ready_pods.stdout"
          delay: 5
          retries: 50

        - name: Update the storage class template with the variables.
          template:
            src: csi-jiva-sc.j2
            dest: csi-jiva-sc.yml

        - name: Create Storageclass
          shell: kubectl apply -f csi-jiva-sc.yml
          args:
            executable: /bin/bash
          register: sc_result
          failed_when: "sc_result.rc != 0"
         
        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

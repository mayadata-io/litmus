---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

          ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

          ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'SOT'
        
        - name: Download the Jiva operator spec
          get_url:
            url: https://raw.githubusercontent.com/openebs/jiva-operator/master/deploy/operator.yaml
            dest: "./"
            force: yes
          register: result
          until:  "'OK' in result.msg"
          delay: 5
          retries: 3

        - name: Update the Jiva operator image
          replace:
            path: operator.yaml
            regexp: ":ci"
            replace: ":{{ operator_image }}"

        - block:

            - name: Download the Jiva CSI Driver if OS is either centos or ubuntu-16.04
              get_url:
                url: https://raw.githubusercontent.com/openebs/jiva-csi/master/deploy/jiva-csi-ubuntu-16.04.yaml
                dest: "./"
                force: yes
              register: result
              until:  "'OK' in result.msg"
              delay: 5
              retries: 3

            - name: Update the operator image in jiva csi driver spec
              replace:
                path: jiva-csi-ubuntu-16.04.yaml
                regexp: ":ci"
                replace: ":{{ operator_image }}"
            
          when: node_os == "ubuntu-16.04" or node_os == "centos"
    
        - block: 

            - name: Download the Jiva CSI Driver if OS is ubuntu-18.04
              get_url:
                url: https://raw.githubusercontent.com/openebs/jiva-csi/master/deploy/jiva-csi.yaml
                dest: "./"
                force: yes
              register: result
              until:  "'OK' in result.msg"
              delay: 5
              retries: 3

            - name: Update the operator image in jiva csi driver spec
              replace:
                path: jiva-csi.yaml
                regexp: ":ci"
                replace: ":{{ operator_image }}"
            
          when: node_os == "ubuntu-18.04"

        - block: 
            - name: Install the Jiva operator in operator namespace
              shell: kubectl apply -f operator.yaml
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"

            - name: Obtain the Jiva operator pod in operator namespace
              shell: >
                kubectl get po -n {{ operator_ns }} --no-headers -l name=jiva-operator 
                -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: jiva_operator_pod
              failed_when: "jiva_operator_pod.rc != 0"
              
            - name: Verify the status of Jiva operator
              shell: >
                kubectl get po {{ jiva_operator_pod.stdout }} -n {{ operator_ns }} 
                --no-headers -o custom-columns=:.status.phase
              args:
                executable: /bin/bash
              register: jiva_operator
              until: "'Running' in jiva_operator.stdout"
              delay: 10
              retries: 30
                
            - block:
                
                - name: Deploy Jiva CSI Driver if OS is either centos or ubuntu-16.04 
                  shell: >
                    kubectl apply -f jiva-csi-ubuntu-16.04.yaml
                  args:
                    executable: /bin/bash
                  register: status
                  failed_when: "status.rc != 0"

              when: node_os == "ubuntu-16.04" or node_os == "centos"
        
            - block: 
                
                - name: Deploy CSI Driver if os is ubuntu 18.04
                  shell: >
                    kubectl apply -f jiva-csi.yaml
                  args:
                    executable: /bin/bash
                  register: status
                  failed_when: "status.rc != 0"

              when: node_os == "ubuntu-18.04"

            - name: check if jiva csi-controller pod is running
              shell: >
                kubectl get pods -n kube-system -l app=openebs-jiva-csi-controller 
                --no-headers -o custom-columns=:status.phase
              args:
                executable: /bin/bash
              register: csi_controller
              until: "'Running' in csi_controller.stdout"
              delay: 10
              retries: 30

            - name: Obtain the desired number of openebs-csi-node pods
              shell: >
                kubectl get daemonset openebs-jiva-csi-node -n kube-system 
                --no-headers -o custom-columns=:status.desiredNumberScheduled
              args:
                executable: /bin/bash
              register: desired_count
              failed_when: "desired_count.rc != 0"

            - name: Check if the desired count matches the ready pods
              command: >
                kubectl get daemonset openebs-jiva-csi-node -n kube-system --no-headers 
                -o custom-columns=:status.numberReady
              args:
                executable: /bin/bash
              register: ready_pods
              until: "desired_count.stdout == ready_pods.stdout"
              delay: 5
              retries: 50

            - name: Update the storage class template with the variables.
              template:
                src: csi-jiva-sc.j2
                dest: csi-jiva-sc.yml

            - name: Create Storageclass
              shell: kubectl apply -f csi-jiva-sc.yml
              args:
                executable: /bin/bash
              register: sc_result
              failed_when: "sc_result.rc != 0"
          
          when: action == "provision"

        - block:
            
            - name: Delete Jiva CSI Driver if OS is either centos or ubuntu-16.04 
              shell: >
                kubectl delete -f jiva-csi-ubuntu-16.04.yaml
              args:
                executable: /bin/bash
              when: node_os == "ubuntu-16.04" or node_os == "centos"
        
            - name: Delete CSI Driver if os is ubuntu 18.04
              shell: >
                kubectl delete -f jiva-csi.yaml
              args:
                executable: /bin/bash
              when: node_os == "ubuntu-18.04"

            - name: Verify if the Jiva CSI controller pod is deleted
              shell: >
                kubectl get pod -n kube-system -l app=openebs-jiva-csi-controller 
                --no-headers -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: jiva_csi_controller
              until: "jiva_csi_controller.stdout == ''"
              delay: 10
              retries: 30

            - name: Verify if the Jiva CSI node pod is deleted
              shell: >
                kubectl get pod -n kube-system -l app=openebs-jiva-csi-node 
                --no-headers -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: jiva_csi_node
              until: "jiva_csi_node.stdout == ''"
              delay: 10
              retries: 30  
                  
            - name: Delete jiva operator from operator namespace
              shell: >
                kubectl delete -f operator.yaml
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"

            - name: Verify if the Jiva operator pod is deleted
              shell: >
                kubectl get pod -n {{ operator_ns }} -l name=jiva-operator 
                --no-headers -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: jiva_operator
              until: "jiva_operator.stdout == ''"
              delay: 10
              retries: 30  
              
            - name: Delete the storage class created
              shell: >
                kubectl delete sc {{ storage_class }}
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"
              
          when: action == "deprovision"

        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

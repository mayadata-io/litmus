---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

          ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

          ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'SOT'

        - block:

            - name: Generate yaml files to create storage class
              template:
                src: "{{ item.src }}"
                dest: "{{ item.dest }}"
              with_items:
                  - { src: jiva-csi-sc.j2,dest: jiva-csi-sc.yml }
                  - { src: jiva-csi-xfs-sc.j2,dest: jiva-csi-xfs-sc.yml }
                  - { src: local-pv-hostpath.j2,dest: local-pv-hostpath.yml }

            - name: Download the Jiva operator spec
              get_url:
                url: https://raw.githubusercontent.com/payes/jiva-operator/test/deploy/operator.yaml
                dest: "./"
                force: yes
              register: result
              until:  "'OK' in result.msg"
              delay: 5
              retries: 3

            - name: Update the Jiva operator image
              replace:
                path: operator.yaml
                regexp: ":ci"
                replace: ":{{ operator_image }}"

            - name: Download the Jiva CSI Driver
              get_url:
                url: https://raw.githubusercontent.com/payes/jiva-operator/test/deploy/jiva-csi.yaml
                dest: "./"
                force: yes
              register: result
              until:  "'OK' in result.msg"
              delay: 5
              retries: 3

            - name: Update the operator image in jiva csi driver spec
              replace:
                path: jiva-csi.yaml
                regexp: ":ci"
                replace: ":{{ operator_image }}"

        - block:

            - name: Create storage classes with specific storage policies
              shell: kubectl apply -f {{ item }}
              args:
                executable: /bin/bash
              register: sc
              with_items:
                - "{{ storage_policies }}"

            - name: Confirm that the storage classes are created
              shell: kubectl get storageclass
              args:
                executable: /bin/bash
              register: result_sc
              until: '"{{ item }}" in result_sc.stdout'
              delay: 15
              retries: 5
              with_items:
                - jiva-csi
                - jiva-csi-xfs
                - local-pv-hostpath

            - name: Install the Jiva operator in operator namespace
              shell: kubectl apply -f operator.yaml
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"

            - name: Obtain the Jiva operator pod in operator namespace
              shell: >
                kubectl get po -n {{ operator_ns }} --no-headers -l name=jiva-operator
                -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: jiva_operator_pod
              failed_when: "jiva_operator_pod.rc != 0"

            - name: Verify the status of Jiva operator
              shell: >
                kubectl get po {{ jiva_operator_pod.stdout }} -n {{ operator_ns }}
                --no-headers -o custom-columns=:.status.phase
              args:
                executable: /bin/bash
              register: jiva_operator
              until: "'Running' in jiva_operator.stdout"
              delay: 10
              retries: 30

            - name: Deploy CSI Driver
              shell: >
                kubectl apply -f jiva-csi.yaml
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"

            - name: check if jiva csi-controller pod is running
              shell: >
                kubectl get pods -n {{ operator_ns }} -l app=openebs-jiva-csi-controller
                --no-headers -o custom-columns=:status.phase
              args:
                executable: /bin/bash
              register: csi_controller
              until: "'Running' in csi_controller.stdout"
              delay: 10
              retries: 30

            - name: Obtain the desired number of openebs-csi-node pods
              shell: >
                kubectl get daemonset openebs-jiva-csi-node -n {{ operator_ns }}
                --no-headers -o custom-columns=:status.desiredNumberScheduled
              args:
                executable: /bin/bash
              register: desired_count
              failed_when: "desired_count.rc != 0"

            - name: Check if the desired count matches the ready pods
              command: >
                kubectl get daemonset openebs-jiva-csi-node -n {{ operator_ns }} --no-headers
                -o custom-columns=:status.numberReady
              args:
                executable: /bin/bash
              register: ready_pods
              until: "desired_count.stdout == ready_pods.stdout"
              delay: 5
              retries: 50

          when: action == "provision"

        - block:

            - name: Delete CSI Driver
              shell: >
                kubectl delete -f jiva-csi.yaml
              args:
                executable: /bin/bash

            - name: Verify if the Jiva CSI controller pod is deleted
              shell: >
                kubectl get pod -n {{ operator_ns }} -l app=openebs-jiva-csi-controller
                --no-headers -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: jiva_csi_controller
              until: "jiva_csi_controller.stdout == ''"
              delay: 10
              retries: 30

            - name: Verify if the Jiva CSI node pod is deleted
              shell: >
                kubectl get pod -n {{ operator_ns }} -l app=openebs-jiva-csi-node
                --no-headers -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: jiva_csi_node
              until: "jiva_csi_node.stdout == ''"
              delay: 10
              retries: 30

            - name: Delete jiva operator from operator namespace
              shell: >
                kubectl delete -f operator.yaml
              args:
                executable: /bin/bash
              register: status
              failed_when: "status.rc != 0"

            - name: Verify if the Jiva operator pod is deleted
              shell: >
                kubectl get pod -n {{ operator_ns }} -l name=jiva-operator
                --no-headers -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: jiva_operator
              until: "jiva_operator.stdout == ''"
              delay: 10
              retries: 30

            - name: Delete storage classes with specific storage policies
              shell: kubectl delete -f {{ item }}
              args:
                executable: /bin/bash
              register: sc
              with_items:
                   - "{{ storage_policies }}"

            - name: Confirm that the storage classes are deleted
              shell: kubectl get storageclass
              args:
                executable: /bin/bash
              register: result_sc
              until: '"{{ item }}" not in result_sc.stdout'
              delay: 15
              retries: 5
              with_items:
                - jiva-csi
                - jiva-csi-xfs
                - local-pv-hostpath

          when: action == "deprovision"

        - set_fact:
            flag: "Pass"

      rescue:
        - name: Setting fail flag
          set_fact:
            flag: "Fail"

      always:
        ## RECORD END-OF-TEST IN LITMUS RESULT CR
        - include_tasks: /utils/fcm/update_litmus_result_resource.yml
          vars:
            status: 'EOT'

---
- hosts: localhost
  connection: local
  gather_facts: False

  vars_files:
    - test_vars.yml

  tasks:
    - block:

         ## Generating the testname for deployment
        - include_tasks: /utils/fcm/create_testname.yml

         ## RECORD START-OF-TEST IN LITMUS RESULT CR
        - include_tasks: "/utils/fcm/update_litmus_result_resource.yml"
          vars:
            status: 'SOT'

        - name: Check if the cStor cvc operator is in expected version
          shell: >
            kubectl get deploy -n {{ operator_ns }}
            -o jsonpath='{.items[?(@.metadata.labels.name=="cvc-operator")].metadata.labels.openebs\.io\/version}'
          args:
            executable: /bin/bash
          register: cvc_version
          failed_when: "cvc_version.stdout is version('1.11.0', operator='lt', strict=True)"

        - name: Check if the cStor cspc operator is in expected version
          shell: >
            kubectl get deploy -n {{ operator_ns }}
            -o jsonpath='{.items[?(@.metadata.labels.name=="cspc-operator")].metadata.labels.openebs\.io\/version}'
          args:
            executable: /bin/bash
          register: cspc_version
          failed_when: "cspc_version.stdout is version('1.11.0', operator='lt', strict=True)"

        - name: Check if the csi daemonset is in expected version
          shell: >
            kubectl get daemonset -n kube-system
            -o jsonpath='{.items[?(@.metadata.labels.app=="openebs-cstor-csi-node")].metadata.labels.openebs\.io\/version}'
          args:
            executable: /bin/bash
          register: csi_dm_version
          failed_when: "csi_dm_version.stdout is version('1.11.0', operator='lt', strict=True)"

        - name: Check if the csi controller is in expected version
          shell: >
            kubectl get sts -n kube-system
            -o jsonpath='{.items[?(@.metadata.labels.name=="openebs-cstor-csi-controller")].metadata.labels.openebs\.io\/version}'
          args:
            executable: /bin/bash
          register: csi_sts_version
          failed_when: "csi_sts_version.stdout is version('1.11.0', operator='lt', strict=True)"

        - name: Obtain the service account name
          shell: kubectl get deploy -n {{ operator_ns }} -l name=maya-apiserver -o jsonpath="{.items[*].spec.template.spec.serviceAccount}"
          register: service_account
          failed_when: 'service_account.stdout == ""'          

        - block:
            - name: Obtain the SPC name
              shell: kubectl get spc -o custom-columns=:.metadata.name --no-headers
              register: spc_name
              failed_when: 'spc_name.stdout == ""'

            - name: Migrate cstor spc pools
              include_tasks: cstor_pool_migration.yml
              with_items: "{{ spc_name.stdout_lines }}"
              loop_control:
                loop_var: outer_item

          when: spc_pool_migration == "true"  

        - block:                               

            - name: Obtain the cStor PV name
              shell: >
                kubectl get pv -o jsonpath='{.items[?(@.metadata.annotations.pv\.kubernetes\.io\/provisioned\-by=="openebs.io/provisioner-iscsi")].metadata.name}' | tr " " "\n"
              register: pv_name
              failed_when: 'pv_name.stdout == ""'

            - name: Migrate cstor volumes
              include_tasks: cstor_volume_migration.yml
              with_items: "{{ pv_name.stdout_lines }}"
              loop_control:
                loop_var: outer_item

          when: cstor_volume_migration == "true"     

        - set_fact:
            flag: "Pass"

      rescue:
          - set_fact:
              flag: "Fail"

      always:
            ## RECORD END-OF-TEST IN LITMUS RESULT CR
          - include_tasks: /utils/fcm/update_litmus_result_resource.yml
            vars:
              status: 'EOT'

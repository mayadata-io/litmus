---

            ##{{ outer_item }} is name of the pv, the values will passed as a loop variable in test.yml

            - name: Obtain the application namespace to scaledown the application
              shell: >
                 kubectl get pvc --all-namespaces --no-headers | grep {{ outer_item }} | awk '{print $1}'
              args:
                executable: /bin/bash
              register: app_ns

            - name: Obtain the application deployment name to scaledown the application
              shell: >
                 kubectl get deploy -n {{ app_ns.stdout }} --no-headers  -o custom-columns=:.metadata.name
              args:
                executable: /bin/bash
              register: app_deploy_name

            - name: Scaledown the application
              shell: >
                 kubectl scale deploy -n {{ app_ns.stdout }} {{ item }} --replicas=0
              args:
                executable: /bin/bash
              register: scale_down_status
              with_items:
                - "{{ app_deploy_name.stdout }}"
              
            - name: Verify if the application scaled down successfully
              shell: >
                 kubectl get deploy -n {{ app_ns.stdout }} {{ item }} --no-headers -o custom-columns=:.spec.replicas
              args:
                executable: /bin/bash
              register: deploy_status
              until: deploy_status.stdout|int == 0
              delay: 2
              retries: 30
              with_items:
                - "{{ app_deploy_name.stdout }}"

            - name: check if the application pod is deleted
              shell: >
                kubectl get pod -n {{ app_ns.stdout }} --no-headers -o custom-columns=:.status.phase
              args:
                executable: /bin/bash
              register: status
              until: "status.stdout == ''"
              delay: 10
              retries: 30              
            
            - name: create job yaml spec for migrate cstor volume
              template:
                src: ./cstor-volume-migration-job.j2
                dest: ./cstor-volume-migration-job-{{ outer_item }}.yml

            - name: Replacing the pv name in migrate cstor volume job spec
              replace:
                path: ./cstor-volume-migration-job-{{ outer_item}}.yml
                regexp: "cstor_volume_name"
                replace: "{{ outer_item }}"

            - name: Replacing the service Account name in migrate cstor volume job spec
              replace:
                path: ./cstor-volume-migration-job-{{ outer_item }}.yml
                regexp: "service_account"
                replace: "{{ service_account.stdout }}"

            - name: Create the job to migrate the cstor volume
              shell: kubectl apply -f cstor-volume-migration-job-{{ outer_item}}.yml
              args:
                executable: /bin/bash

            - name: Check if the migrating jobs have been completed
              shell: >
                kubectl get pods -n {{ operator_ns }} -l job-name=migrate-cstor-{{ outer_item}} 
                -o custom-columns=:.status.phase --no-headers
              register: job_status
              until: "'Succeeded' in job_status.stdout"
              delay: 10
              retries: 60

            - name: Check if the target pod is in Running state
              shell: >
                kubectl get pods -n {{ operator_ns }} -l openebs.io/persistent-volume={{ outer_item }}
                -o custom-columns=:.status.phase --no-headers
              register: target_status
              until: "((target_status.stdout_lines|unique)|length) == 1 and 'Running' in target_status.stdout"
              retries: 30
              delay: 10

            - name: Check if the CVRs are in Healthy state
              shell: >
                kubectl get cvr -n {{ operator_ns }} -l openebs.io/persistent-volume={{ outer_item }}
                -o custom-columns=:.status.phase --no-headers
              register: cvr_status
              until: "((cvr_status.stdout_lines|unique)|length) == 1 and 'Healthy' in cvr_status.stdout"
              retries: 45
              delay: 5

            - name: Check if the CVC is getting created 
              shell: >
                kubectl get cvc -n {{ operator_ns }} --no-headers | grep {{ outer_item }} | awk '{print $1}'
              register: cvc
              until: "outer_item in cvc.stdout"
              retries: 45
              delay: 5

            - name: Check if the CVC is in bound state
              shell: >
                kubectl get cvc -n {{ operator_ns }} {{ outer_item }} --no-headers -o custom-columns=:.status.phase
              register: cvc_status
              until: "'Bound' in cvc_status.stdout"
              retries: 45
              delay: 5

            - name: Scale the application after migration
              shell: >
                 kubectl scale deploy -n {{ app_ns.stdout }} {{ app_deploy_name.stdout }} --replicas=1
              args:
                executable: /bin/bash
              register: scale_status

            - name: Verify if the application scaled up successfully
              shell: >
                 kubectl get deploy -n {{ app_ns.stdout }} --no-headers -o custom-columns=:.spec.replicas
              args:
                executable: /bin/bash
              register: deploy_rep_status
              until: deploy_rep_status.stdout|int == 1
              delay: 2
              retries: 30
            
            - name: check if the application pod is in running state
              shell: >
                kubectl get pod -n {{ app_ns.stdout }} --no-headers -o custom-columns=:.status.phase
              args:
                executable: /bin/bash
              register: pod_status
              until: "'Running' in pod_status.stdout"
              delay: 10
              retries: 30

- block:

    - name: Identify the node on which application pod is scheduled
      shell: >
        kubectl get pod {{ app_pod }} -n {{ app_ns }}
        --no-headers -o custom-columns=:spec.nodeName
      args: 
        executable: /bin/bash
      register: node_name 
               
    - name: Record the application pod node name 
      set_fact:
        app_node: "{{ node_name.stdout }}"

    - name: Get the IP Address of the node on which application pod is scheduled
      shell: >
        kubectl get nodes {{ app_node }} --no-headers -o jsonpath='{.status.addresses[0].address}'
      args:
        executable: /bin/bash
      register: node_ip_address

    - name: Record the IP Address of the node on which application pod is scheduled
      set_fact:
        node_ip_add: "{{ node_ip_address.stdout }}"
 
    - name: Identify the node name on which target pod is scheduled
      shell: >
        kubectl get pod {{ target_pod }} -n {{ operator_ns }}
        --no-headers -o custom-columns=:.spec.nodeName
      args:
        executable: /bin/bash
      register: target_node_name
      when: stg_engine == 'cstor'

    - name: Identify the node name on which controller pod is scheduled
      shell: >
        kubectl get pod {{ ctrl_pod }} -n {{ app_ns }} --no-headers -o custom-columns=:.spec.nodeName
      args:
        executable: /bin/bash
      register: ctrl_node_name
      when: stg_engine == 'jiva'

    - name: Record the node name on which target pod is scheduled
      set_fact: 
        target_node: "{{ target_node_name.stdout }}"
      when: stg_engine == 'cstor'
    
    - name: Record the node name on which controller pod is scheduled
      set_fact: 
        ctrl_node: "{{ ctrl_node_name.stdout }}"
      when: stg_engine == 'jiva'

    - block:
       
       - name: stop the {{ svc_type }} services
         shell: > 
           sshpass -p {{ node_pwd }} ssh -o StrictHostKeyChecking=no root@{{ node_ip_add }} 'systemctl stop {{ svc_type }}.service'
         args:
           executable: /bin/bash

       - name: Check for the {{ svc_type }} service status
         shell: >
           sshpass -p {{ node_pwd }} ssh -o StrictHostKeyChecking=no root@{{ node_ip_add }} 'systemctl status {{ svc_type }}.service' | grep 'inactive'
         args:
          executable: /bin/bash
         register: svc_status
         until: "'inactive' in svc_status.stdout"
         delay: 5
         retries: 15

       - name: Check the node {{ app_node }} status on which {{ svc_type }} failure chaos is induced
         shell:
           kubectl get nodes {{ app_node }}
         args: 
           executable: /bin/bash
         register: node_status
         until: "'NotReady' in node_status.stdout"
         delay: 10
         retries: 30
 
       - block:

          - name: Check if the new target pod is scheduled on some other node after {{ svc_type }} failure
            shell: >
              kubectl get pods -n {{ operator_ns }} -l openebs.io/persistent-volume={{ pvol_name }} --no-headers |  wc -l
            args:
              executable: /bin/bash
            register: target_pod_count
            until: "'2' in target_pod_count.stdout"
            delay: 15
            retries: 30

          - name: Get the new target pod name
            shell: >
              kubectl get pods -n {{ operator_ns }} -l openebs.io/persistent-volume={{ pvol_name }} --no-headers | grep -v Terminating | awk '{print $1}'
            args:
              executable: /bin/bash
            register: new_target_pod

          - name: Check the newly created target pod status
            shell: >
              kubectl get pod {{ new_target_pod.stdout }} -n {{ operator_ns }} --no-headers -o custom-columns=:.status.phase
            args:
              executable: /bin/bash
            register: new_target_pod_status
            until: "'Running' in new_target_pod_status.stdout"
            delay: 15
            retries: 35

         when: 
          - stg_engine == 'cstor'
          - app_node == target_node


       - block:

          - name: Check if the new controller pod is scheduled on some other node after {{ svc_type }} failure
            shell: >
              kubectl get pods -n {{ app_ns }} -l openebs.io/controller=jiva-controller,openebs.io/persistent-volume={{ pvol_name }} --no-headers  |  wc -l
            args:
              executable: /bin/bash
            register: ctrl_pod_count
            until: "'2' in ctrl_pod_count.stdout"
            delay: 15
            retries: 30

          - name: Get the new controller pod name
            shell: >
              kubectl get pods -n {{ app_ns }} -l openebs.io/controller=jiva-controller,openebs.io/persistent-volume={{ pvol_name }} --no-headers | grep -v Terminating | awk '{print $1}'
            args:
              executable: /bin/bash
            register: new_ctrl_pod

          - name: Check the newly created controller pod status
            shell: >
              kubectl get pod {{ new_ctrl_pod.stdout }} -n {{ app_ns }} --no-headers -o custom-columns=:.status.phase
            args:
              executable: /bin/bash
            register: new_ctrl_pod_status
            until: "'Running' in new_ctrl_pod_status.stdout"
            delay: 15
            retries: 35

         when: 
          - stg_engine == 'jiva'
          - app_node == ctrl_node
 
       - name: Check if the new application pod is scheduled on some other node after {{ svc_type }} failure
         shell: >
           kubectl get pods -n {{ app_ns }} -l {{ app_label }} --no-headers | wc -l
         args:
           executable: /bin/bash
         register: app_pod_count
         until: "'2' in app_pod_count.stdout"
         delay: 15
         retries: 30

       - name: Get the new application pod name
         shell: > 
           kubectl get pod -n {{ app_ns }} -l {{ app_label }} --no-headers | grep -v Terminating | awk '{print $1}'
         args:
           executable: /bin/bash
         register: new_app_pod_name

       - name: Record the new application pod name 
         set_fact:
           new_app_pod: "{{ new_app_pod_name.stdout }}"
         
       - name: Check for the newly created application pod status 
         shell: >
           kubectl get pod {{ new_app_pod }} -n {{ app_ns }} --no-headers -o custom-columns=:.status.phase
         args:
           executable: /bin/bash
         register: new_app_pod_status
         until: "'Pending' in new_app_pod_status.stdout"
         delay: 5
         retries: 20
       
      when: svc_type=="cri-o" or svc_type=="containerd" or svc_type=="kubelet"

  when: action == "svc_stop"

  
- block: 

   - name: Start the {{ svc_type }} services
     shell: > 
       sshpass -p {{ node_pwd }} ssh -o StrictHostKeyChecking=no root@{{ node_ip_add }} 'systemctl start {{ svc_type }}.service'
     args:
       executable: /bin/bash

   - name: Check for the {{ svc_type }} services status
     shell: >
       sshpass -p {{ node_pwd }} ssh -o StrictHostKeyChecking=no root@{{ node_ip_add }} 'systemctl status {{ svc_type }}.service' | grep 'active (running)'
     args: 
       executable: /bin/bash
     register: svc_status
     until: "'active (running)' in svc_status.stdout"
     delay: 5
     retries: 15

   - name: Wait after starting the {{ svc_type }} services
     shell: >
       sleep 120

   - name: Check for the node status after starting {{ svc_type }} service
     shell: >
       kubectl get nodes {{ app_node }} --no-headers
     args: 
       executable: /bin/bash
     register: node_status
     until: "'NotReady' not in node_status.stdout"
     delay: 10
     retries: 30
     
   - name: Get the status of newly created application pod
     shell: >
       kubectl get pod {{ new_app_pod }} -n {{ app_ns }} --no-headers -o custom-columns=:.status.phase
     args:
       executable: /bin/bash
     register: application_pod
     until: "'Running' in application_pod.stdout"
     delay: 10
     retries: 50

  when: action == "svc_start"
          
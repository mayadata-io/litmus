- name: Setup pumba chaos infrastructure
  shell: >
    kubectl apply -f /chaoslib/pumba/pumba_kube.yaml
    -n {{ app_ns }}
  args:
    executable: /bin/bash
  register: result 

- name: Confirm that the pumba ds is running on all nodes
  shell: >
    kubectl get pod -l app=pumba 
    --no-headers -o custom-columns=:status.phase
    -n {{ app_ns }} | sort | uniq
  args: 
    executable: /bin/bash
  register: result
  until: "result.stdout == 'Running'"
  delay: 20
  retries: 15

- name: Derive PV from application PVC 
  shell: >
    kubectl get pvc {{ app_pvc }}
    -o custom-columns=:spec.volumeName -n {{ app_ns }}
    --no-headers
  args:
    executable: /bin/bash
  register: pv

- name: Identify the jiva controller pod belonging to the PV
  shell: > 
    kubectl get pods -l openebs.io/controller=jiva-controller,openebs.io/persistent-volume="{{ pv.stdout }}" 
    -n {{ operator_ns }} --no-headers -o custom-columns=:.metadata.name
  args:
    executable: /bin/bash
  register: jiva_controller_pod

- name: Record the jiva controller container name
  set_fact:
    # Depends on the naming convention in maya-apiserver (<pv-id>-rep)
    jiva_controller_name: "{{ pv.stdout }}-ctrl-con"

- name: Identify the jiva replica pod belonging to the PV
  shell: > 
    kubectl get pods -l openebs.io/replica=jiva-replica
    -n {{ operator_ns }} --no-headers | grep {{ pv.stdout }} 
    | awk 'FNR == 1 {print}'| awk {'print $1'}
  args:
    executable: /bin/bash
  register: jiva_replica_pod

- name: Record the jiva replica container name
  set_fact:
    # Depends on the naming convention in maya-apiserver (<pv-id>-rep)
    jiva_replica_name: "{{ pv.stdout }}-rep-con"

- name: Get the node on which the jiva replica is scheduled
  shell: >
    kubectl get pod {{ jiva_replica_pod.stdout }} -n {{ operator_ns }}
    --no-headers -o custom-columns=:spec.nodeName
  args:
    executable: /bin/bash
  register: node  

- name: Get controller svc
  shell: >
    kubectl get svc -l openebs.io/controller-service=jiva-controller-svc,openebs.io/persistent-volume="{{ pv.stdout }}" 
    -n {{ operator_ns }} -o=jsonpath='{.items[0].spec.clusterIP}'
  args:
    executable: /bin/bash
  register: controller_svc
  failed_when: controller_svc.stdout == ""

- name: Install jq package inside a controller container
  shell: >
    kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ operator_ns }} -c {{ jiva_controller_name }} 
    -- bash -c "apt-get update && apt-get install -y jq && apt-get install -y iproute2"
  args:
    executable: /bin/bash

- name: Install jq package inside a replica container
  shell: >
    kubectl exec -it {{ jiva_replica_pod.stdout }} -n {{ operator_ns }} -c {{ jiva_replica_name }}
    -- bash -c "apt-get update && apt-get install -y jq && apt-get install -y iproute2"
  args:
    executable: /bin/bash

- name: Getting the ReplicaCount before injecting delay
  shell: >
   kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ operator_ns }} 
   -c {{ jiva_controller_name }} curl http://"{{controller_svc.stdout}}":9501/v1/volumes | jq -r '.data[].replicaCount'
  args:
    executable: /bin/bash
  register: rcount_before

- name: Getting the RestartCount before injecting delay
  shell: >
   kubectl get pod "{{ jiva_replica_pod.stdout }}" -n {{ operator_ns }} --no-headers 
   -o jsonpath='{.status.containerStatuses[].restartCount}'
  args:
    executable: /bin/bash
  register: restart_count_before

- name: Identify the pumba pod that co-exists with jiva replica (targeted for network delay)
  shell: >
    kubectl get pods -l app=pumba -n {{ app_ns }} 
    -o jsonpath='{.items[?(@.spec.nodeName==''"{{ node.stdout }}"'')].metadata.name}'
  args:
    executable: /bin/bash
  register: pumba_pod

- name: Inject egress delay of {{network_delay}}ms on jiva replica for {{ chaos_duration }}ms
  shell: >
    kubectl exec {{ pumba_pod.stdout }} -n {{ app_ns }} 
    -- pumba netem --interface eth0 --duration {{ chaos_duration }}ms delay
    --time {{ network_delay }} re2:k8s_{{ jiva_replica_name }} 
  args:
    executable: /bin/bash

- name: Verifying the Replica getting disconnected
  shell: >
   kubectl get pod "{{ jiva_replica_pod.stdout }}" -n {{ operator_ns }} --no-headers 
   -o jsonpath='{.status.containerStatuses[].restartCount}'
  args:
    executable: /bin/bash
  register: resp
  until: resp.stdout != restart_count_before.stdout
  retries: 10
  delay: 15

- name: Delete the pumba daemonset 
  shell: kubectl delete -f /chaoslib/pumba/pumba_kube.yaml -n {{ app_ns }} 
  args:
    executable: /bin/bash
  register: result

- name: Confirm that the pumba ds is deleted successfully
  shell: >
    kubectl get pods -l app=pumba --no-headers -n {{ app_ns }}
  args:
    executable: /bin/bash
  register: result
  until: "'Running' not in result.stdout"
  delay: 20
  retries: 15

- name: Verifying the replicas post network recovery
  shell: >
   kubectl exec -it {{ jiva_controller_pod.stdout }} -n {{ operator_ns }} 
   -c {{ jiva_controller_name }} curl http://"{{controller_svc.stdout}}":9501/v1/volumes | jq -r '.data[].replicaCount'
  args:
    executable: /bin/bash
  register: replica
  until: replica.stdout == rcount_before.stdout
  retries: 10
  delay: 15


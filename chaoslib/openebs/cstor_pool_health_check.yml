- name: Wait (soak) for I/O on pools 
  wait_for:
    timeout: "{{ post_chaos_soak_time }}"

- name: Derive PV from application PVC
  shell: >
    kubectl get pvc {{ app_pvc }}
    -o custom-columns=:spec.volumeName -n {{ app_ns }}
    --no-headers
  args:
    executable: /bin/bash
  register: pv

- name: Get list of pool deployments from cvr
  shell: >
    kubectl get cvr -n {{ operator_ns }}
    -l openebs.io/persistent-volume={{ pv.stdout }} --no-headers
    -o=jsonpath='{range .items[*]}{.metadata.labels.cstorpool\.openebs\.io\/name}{"\n"}{end}'
    | awk '{print $1}'
  args:
    executable: /bin/bash
  register: pool_deployment_list

#- name: Get list of pool pods of respective deployments
#  shell: >
#    kubectl get pods -n {{ operator_ns }} -l app=cstor-pool 
#    --no-headers -o custom-columns=:metadata.name | grep {{ item }} 
#  args:
#    executable: /bin/bash
#  register: pool_pod_list
#  with_items: "{{ pool_deployment_list.stdout_lines }}"

- name: Obtaining the replicasets corresponding to pool deployements.
  shell: >
    kubectl get rs -l app=cstor-pool -n {{ operator_ns }} --no-headers
    -o=jsonpath='{.items[?(@.metadata.ownerReferences[0].name=="{{item}}")].metadata.name}'
  register: rs_list
  with_items:
    - "{{ pool_deployment_list.stdout_lines }}"

- name: Obtaining the pool pods
  shell: >
    kubectl get pod -l app=cstor-pool -n {{ operator_ns }} --no-headers
    -o=jsonpath='{.items[?(@.metadata.ownerReferences[0].name=="{{item.stdout}}")].metadata.name}'
  register: pool_pod_list
  with_items:
    - "{{ rs_list.results }}"

- set_fact:
    #pool_pod_length: "{{ pool_pod_list.results | length }}"
    pool_pod_named_list: "{{ pool_pod_named_list|default([])}}"

- name: Build a list of replica pods
  set_fact:
    pool_pod_named_list : "{{ pool_pod_named_list  }} + [ '{{ item.stdout }}' ]"
  with_items: "{{ pool_pod_list.results }}"

## Ref for list entension based on with_seq
#- name: Build a list of replica pods
#  set_fact: 
#    pool_pod_named_list: "{{ pool_pod_named_list + pool_pod_list.results[item|int].stdout_lines }}"
#  with_sequence: start=0 end={{pool_pod_length | int - 1}}

- name: Verify logs of pool pods for error strings
  shell: >
    kubectl logs {{ item }} -n {{ operator_ns }}
    -c cstor-pool | egrep '{{ error_messages }}'
  args:
    executable: /bin/bash
  register: result
  with_items: "{{ pool_pod_named_list }}"
  failed_when: result.rc == 0
